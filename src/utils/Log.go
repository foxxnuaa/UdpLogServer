/*
系统日志模块.

提供日志打印功能，内容将打印到屏幕和日志文件。
注意：该日志模块仅打印进程系统日志，不处理游戏逻辑日志。

功能：
	提供日志等级打印功能
	每个进程独立日志

	日志文件名：进程名+PID+日期时间

等级：
	VERBOSE = 4
	// 调试信息
	DEBUG = 3
	// 警告
	WARN = 2
	// 错误信息
	ERROR = 1
	// 普通信息，用在主流程
	INFO = 0

例子：

	kLog.Printf(kLog.DEBUG, "%s=%d", strString, nInt)
*/
package utils

import (
	"github.com/cprint"
	"errors"
	"fmt"
	"io"
	"net"
	"os"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
	"sync"
	"time"
	//"reflect"
)

//copy from standard package log end
/////////////////////////////////////////////////////////////////////////

// 系统日志实例
var logger *Logger = nil
var loggerStd *Logger = nil
var logfile *os.File = nil
var createFileLock sync.Mutex

// 日志等级变量
var nLogLevel = VERBOSE

// 文件日志等级
var nFileLevel = ERROR

// 服务器类型
var nServerType = 0

// 日志等级枚举
const (
	// 详细信息，用在细节流程
	VERBOSE = 4
	// 调试信息
	DEBUG = 3
	// 警告
	WARN = 2
	// 错误信息
	ERROR = 1
	// 普通信息，用在主流程
	INFO = 0
)

//日志类型常量
const (
	TYPE_ACTION = 1 //行为日志
	TYPE_ITEM   = 2 //道具日志
	TYPE_SYSTEM = 3 //系统日志
)

/////////////////////////////////////////////////////////////////////////
//copy from standard package log begin
// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed. There is no control over the
	// order they appear (the order listed here) or the format they present (as
	// described in the comments).  A colon appears after these items:
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date: 2009/01/23
	Ltime                         // the time: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// A Logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu         sync.Mutex   // ensures atomic writes; protects the following fields
	prefix     string       // prefix to write at beginning of each line
	flag       int          // properties
	out        io.Writer    // destination for output
	buf        []byte       // for accumulating text to write
	queueWrite chan *string //异步写入文件的队列
	lastLogDay int
}

var StrLogServerUrl string

func SetLogServerUrl(strLogServerUrl string) {
	StrLogServerUrl = strLogServerUrl
}

func getLevelName(nLevel int) string {
	switch nLevel {
	case DEBUG:
		return "DEBUG:"
	case WARN:
		return "WARING:"
	case ERROR:
		return "ERROR:"
	case INFO:
		return "NOTICE:"
	default:
		return "DEBUG:"
	}
}
func logLevelToCPrintLevel(nLevel int) int {

	switch nLevel {
	case DEBUG:
		return cprint.DEBUG
	case WARN:
		return cprint.WARING
	case ERROR:
		return cprint.ERROR
	case INFO:
		return cprint.NOTICE
	default:
		return cprint.DEBUG
	}
}

func SetServerType(nType int32) {
	nServerType = int(nType)
}

// 设置日志等级
func SetLevel(nLevel int) {
	fmt.Println("SetLevel:", nLevel)
	nLogLevel = DEBUG //nLevel
}

// 设置日志等级
func SetFileLevel(nLevel int) {
	nFileLevel = nLevel
}

//	获取日志等级
// 	return 日志等级
func GetLevel() int {
	return nLogLevel
}

func checkDir() {
	os.Chdir("bin")
}

//func PrintKRpcError(e OWM_Protocol.KRpcError) {
//
//	if e.NError == 0 {
//		return
//	}
//
//	v, ok := OWM_Protocol.ErrorStrings[e.NError]
//
//	if ok {
//		Println(ERROR, v)
//	} else {
//		Printf(ERROR, "Can't get error string from id=%d \n", e.NError)
//	}
//
//	return
//}

// 建立日志文件
func create() error {
	//strFileName := time.Now().Format("20060102")

	cNowTime := GetNowTime()
	nHour, nMinute, nSecond := cNowTime.Clock()
	strFileDate := cNowTime.Format("2006_01_02")
	strFileName := fmt.Sprintf("%s_%2.2d_%2.2d_%2.2d", strFileDate, nHour, nMinute, nSecond)
	strCurDay := cNowTime.Format("20060102")
	lastLogDay, _ := strconv.Atoi(strCurDay)
	currentPath := filepath.Dir(os.Args[0])
	logPathExist := false

	filepath.Walk(currentPath, func(path string, f os.FileInfo, err error) error {
		if f.IsDir() && f.Name() == "log" {
			logPathExist = true
			return errors.New(fmt.Sprintln("path exist, find finish"))
		}
		return nil
	})

	if !logPathExist {
		err := os.Mkdir(currentPath+"/log", os.ModePerm)
		if err != nil {
			fmt.Println("create log dir err")
		}
	}

	if logfile != nil {
		logfile.Close()
	}
	var err error
	logfile, err = os.OpenFile(currentPath+"/log/"+filepath.Base(os.Args[0])+"_"+strFileName+".log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0755)
	if err != nil {
		fmt.Println(err)
		return err
	}

	logger = New(logfile, "\n", Ldate|Lmicroseconds|Lshortfile)
	logger.lastLogDay = lastLogDay
	//loggerStd = New(os.Stdout, "", Lshortfile)

	return nil
}

// 格式化打印信息日志
//
// 参数：日志等级, 格式化字符串, ...
func Infof(strFormat string, v ...interface{}) {
	PrintfVerbose(INFO, 0, strFormat, v...)
}

// 格式化打印信息日志
//
// 参数：格式化字符串, ...
func Infoln(v ...interface{}) {
	PrintlnVerbose(INFO, 0, v...)
}

// 格式化打印调式日志
//
// 参数：格式化字符串, ...
func Debugf(strFormat string, v ...interface{}) {
	PrintfVerbose(DEBUG, 0, strFormat, v...)
}

// 格式化打印调式日志
//
// 参数：格式化字符串, ...
func Debugln(v ...interface{}) {
	PrintlnVerbose(DEBUG, 0, v...)
}

// 格式化打印错误日志
//
// 参数：格式化字符串, ...
func Warnf(strFormat string, v ...interface{}) {
	PrintfVerbose(WARN, 0, strFormat, v...)
}

// 格式化打印错误日志
//
// 参数：格式化字符串, ...
func Warnln(v ...interface{}) {
	PrintlnVerbose(WARN, 0, v...)
}

// 格式化打印错误日志
//
// 参数：格式化字符串, ...
func Errorf(strFormat string, v ...interface{}) {
	PrintfVerbose(ERROR, 0, strFormat, v...)
}

// 格式化打印错误日志
//
// 参数：格式化字符串, ...
func Errorln(v ...interface{}) {
	PrintlnVerbose(ERROR, 0, v...)
}

// 格式化打印日志
//
// 参数：日志等级, 格式化字符串, ...
func Printf(nLevel int, strFormat string, v ...interface{}) {
	PrintfVerbose(nLevel, 0, strFormat, v...)
}

func PrintfVerbose(nLevel int, uid uint32, strFormat string, v ...interface{}) {
	if logger == nil {
		create()
	}

	if nLevel <= nLogLevel || nLevel <= nFileLevel {

		msg := fmt.Sprintf(strFormat, v...)
		msg = fmt.Sprintf("%d:%s", uid, msg)

		logger.Output(nLevel, uid, 3, msg)

		//loggerStd.Output(3, msg)
		//logfile.Sync()
		//fmt.Println(time.Now().String()+"\t", msg)
	}
}

// 打印一行日志
//
// 参数：日志等级, ...
func Println(nLevel int, v ...interface{}) {
	PrintlnVerbose(nLevel, 0, v...)
}

func PrintlnVerbose(nLevel int, uid uint32, v ...interface{}) {
	if logger == nil {
		create()
	}

	if nLevel <= nLogLevel || nLevel <= nFileLevel {

		msg := fmt.Sprintln(v...)
		msg = fmt.Sprintf("%d:%s", uid, msg)

		msg = string([]byte(msg)[0 : len(msg)-1])
		logger.Output(nLevel, uid, 3, msg)

		//loggerStd.Output(3, msg)
		//logfile.Sync()
		//fmt.Println(time.Now().String()+"\t", msg)
	}
}

// 判断错误，并且打印日志
//
// 返回值  true 有错误, false 没有错误。
func IsError(err error) bool {
	if logger == nil {
		create()
	}

	if err != nil {
		if ERROR <= nLogLevel {
			msg := err.Error()
			logger.Output(ERROR, 0, 2, msg)
			//loggerStd.Output(2, msg)
			//logfile.Sync()
			//fmt.Println(msg)
		}
		return true
	}

	return false
}

func NewErrorf(strFormat string, v ...interface{}) error {
	if logger == nil {
		create()
	}

	msg := fmt.Sprintf(strFormat, v...)
	logger.Output(ERROR, 0, 2, msg)
	//loggerStd.Output(2, msg)
	//logfile.Sync()
	//fmt.Println(msg)

	return errors.New(msg)
}

// 检测指针，打印日志，返回error
func CheckNilPointer(strObjectName string, i interface{}) error {

	if i != nil {
		return nil
	}

	return NewErrorf(strObjectName + " is nil!")
}

// New creates a new Logger.   The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func New(out io.Writer, prefix string, flag int) *Logger {
	logger := &Logger{out: out, prefix: prefix, flag: flag, queueWrite: make(chan *string, 1000)}
	go DoWrite(logger)
	return logger
}

func DoWrite(logger *Logger) {
	timeout := time.After(time.Minute)
	for {
		select {
		case <-timeout:
			if logfile != nil {
				logfile.Sync()
			}
			go DoWrite(logger)
			return
		default:
		}
		select {
		case msg := <-logger.queueWrite:
			if _, err := logger.out.Write([]byte(*msg)); err != nil {
				return
			}
		}
	}
}

var std = New(os.Stderr, "", LstdFlags)

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
// Knows the buffer has capacity.
func itoa(buf *[]byte, i int, wid int) {
	var u uint = uint(i)
	if u == 0 && wid <= 1 {
		*buf = append(*buf, '0')
		return
	}

	// Assemble decimal in reverse order.
	var b [32]byte
	bp := len(b)
	for ; u > 0 || wid > 0; u /= 10 {
		bp--
		wid--
		b[bp] = byte(u%10) + '0'
	}
	*buf = append(*buf, b[bp:]...)
}

func (l *Logger) formatHeader(buf *[]byte, t time.Time, file string, line int) {
	*buf = append(*buf, l.prefix...)
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
}

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(nLevel int, uUid uint32, calldepth int, s string) error {

	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()

	if l.flag&(Lshortfile|Llongfile) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}

	nLastIndex := strings.LastIndex(file, "/")

	if nLastIndex != -1 {
		file = file[nLastIndex:]
	}

	strOutPut := GetNowTime().Format("2006-01-02 15:04:05")
	strOutPut += file + " " + strconv.Itoa(line) + " " + s + "\n"

	if nLevel <= nLogLevel {
		// 打印到屏幕
		cprint.P(logLevelToCPrintLevel(nLevel), strOutPut)

		// 发远程日志服务器
		//PushLog(nServerType, nLevel, uUid, &strOutPut, time.Now().Unix())
	}

	if nLevel <= nFileLevel {
		// 写到文件
		// 文件大小超过1G新建文件或者跨天重新创建文件
		iNow, _ := strconv.Atoi(GetNowTime().Format("20060102"))
		if l.lastLogDay < iNow || l.getFileSize() > 1073741824 {
			createFileLock.Lock()
			create()
			createFileLock.Unlock()
			l = logger
		}

		l.out.Write([]byte(getLevelName(nLevel) + strOutPut))
	}

	return nil
}

func (l *Logger) getFileSize() int64 {
	if fi, ok := l.out.(*os.File); ok {
		fileInfo, err := fi.Stat()
		if err == nil && fileInfo != nil {
			return fileInfo.Size()
		}
	}
	return 0
}

//发送Log到日志服务器
func PushToLogServer(conn *net.Conn, uUid string, nLogType int, strContent string) error {

	go func() {
		//fmt.Println("PushToLogServer:", strContent)
		Debugln("Statics:" + strconv.Itoa(nLogType) + "|" + strContent) //本地也打印一份
		strOutPut := GetNowTime().Format("2006-01-02 15:04:05")
		//strOutPut += "|" + uUid + "|"
		strOutPut += ("|" + strContent)

		strOutPut = strconv.Itoa(nLogType) + "|" + strOutPut

		sendBuffer := []byte(strOutPut)
		sendSize := len(sendBuffer)
		var sendBufferSize []byte = make([]byte, 4)

		sendBufferSize[0] = byte(0x000000FF & sendSize)
		sendBufferSize[1] = byte((0x0000FF00 & sendSize) >> 8)
		sendBufferSize[2] = byte((0x00FF0000 & sendSize) >> 16)
		sendBufferSize[3] = byte((0xFF000000 & sendSize) >> 24)
		sendBuffer = append(sendBufferSize, sendBuffer...)
		var err error
		if conn != nil {
			_, err = (*conn).Write(sendBuffer)

		}

		//重连，重试一次
		if nil != err || conn == nil {
			Errorln("PushToLogServer error:", err, conn) //本地也打印一份
			connTemp, err := net.Dial("tcp", StrLogServerUrl)
			if nil == err {
				*conn = connTemp
				_, err = (*conn).Write(sendBuffer)
			}
		}

	}()

	return nil
}

//func goPushToLogServer
