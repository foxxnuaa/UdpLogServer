// Code generated by protoc-gen-go.
// source: server_push.proto
// DO NOT EDIT!

package OAR1

import proto "3rdparty/src/proto"
import json "encoding/json"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "3rdparty/src/protorpc"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type PushRequest struct {
	Msg              *string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}

func (m *PushRequest) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

type PushResponse struct {
	Msg              *string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PushResponse) Reset()         { *m = PushResponse{} }
func (m *PushResponse) String() string { return proto.CompactTextString(m) }
func (*PushResponse) ProtoMessage()    {}

func (m *PushResponse) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func init() {
}

type PushService interface {
	UpdateState(in *PushRequest, out *PushResponse) error
}

// AcceptPushServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptPushServiceClient(lis net.Listener, x PushService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("PushService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterPushService publish the given PushService implementation on the server.
func RegisterPushService(srv *rpc.Server, x PushService) error {
	if err := srv.RegisterName("PushService", x); err != nil {
		return err
	}
	return nil
}

// NewPushServiceServer returns a new PushService Server.
func NewPushServiceServer(x PushService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("PushService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServePushService listen announces on the local network address laddr
// and serves the given PushService implementation.
func ListenAndServePushService(network, addr string, x PushService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("PushService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type PushServiceClient struct {
	*rpc.Client
}

// NewPushServiceClient returns a PushService rpc.Client and stub to handle
// requests to the set of PushService at the other end of the connection.
func NewPushServiceClient(conn io.ReadWriteCloser) (*PushServiceClient, *rpc.Client) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &PushServiceClient{c}, c
}

func (c *PushServiceClient) UpdateState(in *PushRequest, out *PushResponse) error {
	return c.Call("PushService.UpdateState", in, out)
}

// DialPushService connects to an PushService at the specified network address.
func DialPushService(network, addr string) (*PushServiceClient, *rpc.Client, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	return &PushServiceClient{c}, c, nil
}

// DialPushServiceTimeout connects to an PushService at the specified network address.
func DialPushServiceTimeout(network, addr string,
	timeout time.Duration) (*PushServiceClient, *rpc.Client, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, nil, err
	}
	return &PushServiceClient{c}, c, nil
}
