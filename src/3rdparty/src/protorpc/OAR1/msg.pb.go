// Code generated by protoc-gen-go.
// source: msg.proto
// DO NOT EDIT!

package OAR1

import proto "3rdparty/src/proto"
import json "encoding/json"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "3rdparty/src/protorpc"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type ClickRequest struct {
	X                *int32  `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                *int32  `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	TimeClick        *string `protobuf:"bytes,3,opt,name=timeClick" json:"timeClick,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ClickRequest) Reset()         { *m = ClickRequest{} }
func (m *ClickRequest) String() string { return proto.CompactTextString(m) }
func (*ClickRequest) ProtoMessage()    {}

func (m *ClickRequest) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *ClickRequest) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *ClickRequest) GetTimeClick() string {
	if m != nil && m.TimeClick != nil {
		return *m.TimeClick
	}
	return ""
}

type ClickResponse struct {
	X                *int32  `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                *int32  `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	TimeClick        *string `protobuf:"bytes,3,opt,name=timeClick" json:"timeClick,omitempty"`
	DurationSend     *int32  `protobuf:"varint,4,opt,name=durationSend" json:"durationSend,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ClickResponse) Reset()         { *m = ClickResponse{} }
func (m *ClickResponse) String() string { return proto.CompactTextString(m) }
func (*ClickResponse) ProtoMessage()    {}

func (m *ClickResponse) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *ClickResponse) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *ClickResponse) GetTimeClick() string {
	if m != nil && m.TimeClick != nil {
		return *m.TimeClick
	}
	return ""
}

func (m *ClickResponse) GetDurationSend() int32 {
	if m != nil && m.DurationSend != nil {
		return *m.DurationSend
	}
	return 0
}

func init() {
}

type ClickService interface {
	Echo(in *ClickRequest, out *ClickResponse) error
}

// AcceptClickServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptClickServiceClient(lis net.Listener, x ClickService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("ClickService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterClickService publish the given ClickService implementation on the server.
func RegisterClickService(srv *rpc.Server, x ClickService) error {
	if err := srv.RegisterName("ClickService", x); err != nil {
		return err
	}
	return nil
}

// NewClickServiceServer returns a new ClickService Server.
func NewClickServiceServer(x ClickService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("ClickService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeClickService listen announces on the local network address laddr
// and serves the given ClickService implementation.
func ListenAndServeClickService(network, addr string, x ClickService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("ClickService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type ClickServiceClient struct {
	*rpc.Client
}

// NewClickServiceClient returns a ClickService rpc.Client and stub to handle
// requests to the set of ClickService at the other end of the connection.
func NewClickServiceClient(conn io.ReadWriteCloser) (*ClickServiceClient, *rpc.Client) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &ClickServiceClient{c}, c
}

func (c *ClickServiceClient) Echo(in *ClickRequest, out *ClickResponse) error {
	return c.Call("ClickService.Echo", in, out)
}

// DialClickService connects to an ClickService at the specified network address.
func DialClickService(network, addr string) (*ClickServiceClient, *rpc.Client, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	return &ClickServiceClient{c}, c, nil
}

// DialClickServiceTimeout connects to an ClickService at the specified network address.
func DialClickServiceTimeout(network, addr string,
	timeout time.Duration) (*ClickServiceClient, *rpc.Client, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, nil, err
	}
	return &ClickServiceClient{c}, c, nil
}
